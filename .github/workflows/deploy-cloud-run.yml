name: Deploy Cloud Run

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag"
        required: false
        default: "v1"
      model_gcs_uri:
        description: "GCS URI to model tar.gz (e.g. gs://bucket/models/kcbert_model.tar.gz)"
        required: true
      api_key:
        description: "Optional API key to inject (X-API-Key)"
        required: false
      cors_origins:
        description: "Optional comma-separated CORS origins for /predict"
        required: false
      threshold_certain:
        description: "Optional MALICIOUS_THRESHOLD_CERTAIN (e.g. 0.999)"
        required: false
      threshold_ambiguous:
        description: "Optional MALICIOUS_THRESHOLD_AMBIGUOUS (e.g. 0.9)"
        required: false

env:
  REGION: us-west1
  SERVICE_NAME: toxic-filter
  REPO: toxic-filter

concurrency:
  group: cloud-run-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to GCP via WIF
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER || vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'beta'

      - name: Set project
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          gcloud config set project "${GCP_PROJECT_ID}"
          gcloud config set run/region "${{ env.REGION }}"

      - name: Enable required APIs
        run: |
          gcloud services enable \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            cloudbuild.googleapis.com

      - name: Ensure Artifact Registry repo
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          gcloud artifacts repositories describe "${{ env.REPO }}" \
            --location "${{ env.REGION }}" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "${{ env.REPO }}" \
            --repository-format=docker \
            --location "${{ env.REGION }}"

      - name: Build and Push image (Cloud Build)
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          IMAGE_TAG: ${{ github.event.inputs.image_tag || 'v1' }}
          # Fallback to secret if manual input omitted (e.g., on push)
          MODEL_GCS_URI: ${{ github.event.inputs.model_gcs_uri || secrets.MODEL_GCS_URI }}
        run: |
          set -euo pipefail

          if [[ -z "${MODEL_GCS_URI}" ]]; then
            echo "❌ MODEL_GCS_URI is required. Provide via workflow input or set a repo secret 'MODEL_GCS_URI'."
            exit 1
          fi

          IMAGE_URI="${{ env.REGION }}-docker.pkg.dev/${GCP_PROJECT_ID}/${{ env.REPO }}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
          echo "IMAGE_URI=${IMAGE_URI}" >> "$GITHUB_ENV"

          # Generate Cloud Build config that pulls the model from GCS into the build context, then builds & pushes.
          cat > cloudbuild.yaml <<EOF
          steps:
          - name: 'gcr.io/cloud-builders/gsutil'
            args: ['cp', '${MODEL_GCS_URI}', 'kcbert_model.tar.gz']
          - name: 'gcr.io/cloud-builders/docker'
            args: ['build', '-f', 'Dockerfile', '-t', '${IMAGE_URI}', '.']
          images:
          - '${IMAGE_URI}'
          EOF

          # Submit build
          gcloud builds submit --config=cloudbuild.yaml --project "${GCP_PROJECT_ID}" .

      - name: Deploy to Cloud Run
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          IMAGE_URI: ${{ env.IMAGE_URI }}
          # Optional inputs/secrets with fallback
          API_KEY_IN: ${{ github.event.inputs.api_key || secrets.API_KEY }}
          CORS_ORIGINS_IN: ${{ github.event.inputs.cors_origins }}
          THRESHOLD_CERTAIN_IN: ${{ github.event.inputs.threshold_certain }}
          THRESHOLD_AMBIGUOUS_IN: ${{ github.event.inputs.threshold_ambiguous }}
        run: |
          set -euo pipefail

          # Build env var list conditionally
          ENV_VARS="PORT=9090"
          if [[ -n "${API_KEY_IN:-}" ]]; then
            ENV_VARS+=",API_KEY=${API_KEY_IN}"
          fi
          if [[ -n "${CORS_ORIGINS_IN:-}" ]]; then
            ENV_VARS+=",CORS_ORIGINS=${CORS_ORIGINS_IN}"
          fi
          if [[ -n "${THRESHOLD_CERTAIN_IN:-}" ]]; then
            ENV_VARS+=",MALICIOUS_THRESHOLD_CERTAIN=${THRESHOLD_CERTAIN_IN}"
          fi
          if [[ -n "${THRESHOLD_AMBIGUOUS_IN:-}" ]]; then
            ENV_VARS+=",MALICIOUS_THRESHOLD_AMBIGUOUS=${THRESHOLD_AMBIGUOUS_IN}"
          fi

          gcloud run deploy "${{ env.SERVICE_NAME }}" \
            --image "${IMAGE_URI}" \
            --region "${{ env.REGION }}" \
            --platform managed \
            --allow-unauthenticated \
            --cpu=1 \
            --memory=1Gi \
            --concurrency=80 \
            --min-instances=0 \
            --max-instances=3 \
            --port=9090 \
            --ingress=all \
            --labels=deployed_by=github-actions,commit_sha=${{ github.sha }} \
            --update-env-vars "${ENV_VARS}"

      - name: Get service URL
        id: url
        run: |
          URL="$(gcloud run services describe '${{ env.SERVICE_NAME }}' --region='${{ env.REGION }}' --format='value(status.url)')"
          echo "service_url=${URL}" >> "$GITHUB_OUTPUT"

      - name: Post deployment summary
        run: |
          echo "✅ Deployed **${{ env.SERVICE_NAME }}** to **${{ env.REGION }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`${{ env.IMAGE_URI }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- URL: ${{ steps.url.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
